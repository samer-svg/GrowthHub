// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String      @id @default(cuid())
  name                  String?
  userName              String?     @unique
  email                 String?     @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  skills                UserSkill[]
  createdAt             DateTime    @default(now())
  accounts              Account[]
  sessions              Session[]
  stats                 Stat?
  goals                 Goal[]
  habits                Habit[]
  stripeCustomerId      String?     @unique
  stripeSubscriptionId  String?
  subscriptionPeriodEnd DateTime?
  plan                  String?
  subscriptionStatus    String?
  periodEnd             DateTime?
}

model Stat {
  id            String @id @default(cuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
  streak        Int    @default(0)
  goalsDone     Int    @default(0)
  habitsTracked Int    @default(0)
}

model Goal {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Habit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  trackedAt DateTime @default(now())
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSkill {
  id         Int        @id @default(autoincrement())
  userId     String
  skillName  String
  skillLevel SkillLevel
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, skillName])
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model ProjectIdea {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  difficultyLevel DifficultyLevel
  requiredSkills  String[]
  tags            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model LearningPath {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  resources   Resource[]
}

model Resource {
  id             Int          @id @default(autoincrement())
  title          String
  url            String
  type           ResourceType
  learningPathId Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id])
}

enum ResourceType {
  VIDEO
  COURSE
  ARTICLE
  DOCUMENTATION
}
